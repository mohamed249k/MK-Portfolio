// scripts.js - Generated by AI per Mohamed Karam prompt - 2023
document.addEventListener('DOMContentLoaded', function() {
    // Load required libraries for PDF generation
    loadScript('https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js', function() {
        loadScript('https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js', initApp);
    });

    function loadScript(url, callback) {
        const script = document.createElement('script');
        script.src = url;
        script.onload = callback;
        document.head.appendChild(script);
    }

    function initApp() {
        // Mobile menu toggle
        const hamburger = document.querySelector('.hamburger');
        const navList = document.querySelector('.nav-list');
        
        if (hamburger && navList) {
            hamburger.addEventListener('click', function() {
                navList.classList.toggle('active');
                hamburger.classList.toggle('active');
            });
        }
        
        // Close mobile menu when clicking on a link
        const navLinks = document.querySelectorAll('.nav-link');
        navLinks.forEach(link => {
            link.addEventListener('click', function() {
                if (navList.classList.contains('active')) {
                    navList.classList.remove('active');
                    hamburger.classList.remove('active');
                }
            });
        });
        
        // Theme toggle functionality
        const themeToggle = document.querySelector('.theme-toggle');
        const icon = themeToggle.querySelector('i');
        
        if (themeToggle) {
            themeToggle.addEventListener('click', function() {
                const currentTheme = document.documentElement.getAttribute('data-theme') || 'dark';
                const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                
                document.documentElement.setAttribute('data-theme', newTheme);
                icon.classList.toggle('fa-moon');
                icon.classList.toggle('fa-sun');
                
                // Save theme preference to localStorage
                localStorage.setItem('theme', newTheme);
            });
        }
        
        // Check for saved theme preference
        const savedTheme = localStorage.getItem('theme');
        if (savedTheme) {
            document.documentElement.setAttribute('data-theme', savedTheme);
            if (savedTheme === 'light') {
                icon.classList.toggle('fa-moon');
                icon.classList.toggle('fa-sun');
            }
        }
        
        // Smooth scrolling for navigation links
        navLinks.forEach(link => {
            link.addEventListener('click', function(e) {
                e.preventDefault();
                
                const targetId = this.getAttribute('href');
                const targetSection = document.querySelector(targetId);
                
                if (targetSection) {
                    window.scrollTo({
                        top: targetSection.offsetTop - 70,
                        behavior: 'smooth'
                    });
                }
            });
        });
        
        // Animate skill bars when they come into view
        const skillBars = document.querySelectorAll('.skill-progress');
        
        if ('IntersectionObserver' in window) {
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const width = entry.target.getAttribute('data-width');
                        entry.target.style.width = width;
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.5 });
            
            skillBars.forEach(bar => {
                observer.observe(bar);
            });
        } else {
            // Fallback for browsers without IntersectionObserver
            skillBars.forEach(bar => {
                const width = bar.getAttribute('data-width');
                bar.style.width = width;
            });
        }
        
        // Lightbox functionality for certificates and project images
        const lightbox = document.getElementById('lightbox');
        const lightboxImage = document.querySelector('.lightbox-image');
        const lightboxClose = document.querySelector('.lightbox-close');
        const certificateItems = document.querySelectorAll('.certificate-item');
        const projectViewButtons = document.querySelectorAll('.project-view');
        
        // Function to open lightbox with specific image
        function openLightbox(imageSrc) {
            lightboxImage.setAttribute('src', imageSrc);
            lightboxImage.setAttribute('alt', 'Enlarged view');
            lightbox.classList.add('active');
            document.body.style.overflow = 'hidden'; // Prevent scrolling
        }
        
        // Function to close lightbox
        function closeLightbox() {
            lightbox.classList.remove('active');
            document.body.style.overflow = ''; // Re-enable scrolling
        }
        
        // Add click events to certificate items
        certificateItems.forEach(item => {
            item.addEventListener('click', function() {
                const imageSrc = this.querySelector('img').getAttribute('src');
                openLightbox(imageSrc);
            });
        });
        
        // Add click events to project view buttons
        projectViewButtons.forEach(button => {
            button.addEventListener('click', function(e) {
                e.stopPropagation(); // Prevent event bubbling to parent elements
                const imageSrc = this.closest('.project-card').querySelector('img').getAttribute('src');
                openLightbox(imageSrc);
            });
        });
        
        // Close lightbox when clicking close button or outside image
        if (lightboxClose) {
            lightboxClose.addEventListener('click', closeLightbox);
        }
        
        lightbox.addEventListener('click', function(e) {
            if (e.target === lightbox) {
                closeLightbox();
            }
        });
        
        // Close lightbox with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && lightbox.classList.contains('active')) {
                closeLightbox();
            }
        });
        
        // Form validation and submission
        const contactForm = document.getElementById('contactForm');
        
        if (contactForm) {
            contactForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                // Basic validation
                const name = document.getElementById('name').value.trim();
                const email = document.getElementById('email').value.trim();
                const subject = document.getElementById('subject').value.trim();
                const message = document.getElementById('message').value.trim();
                
                if (!name || !email || !subject || !message) {
                    alert('Please fill in all fields');
                    return;
                }
                
                // Email validation
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                    alert('Please enter a valid email address');
                    return;
                }
                
                // If validation passes, send via mailto (fallback)
                const mailtoLink = `mailto:mohamedelmagraby35@gmail.com?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent('Name: ' + name + '\nEmail: ' + email + '\n\n' + message)}`;
                window.location.href = mailtoLink;
                
                // Show success message (optional)
                alert('Thank you for your message! I will get back to you soon.');
                contactForm.reset();
            });
        }
        
        // Add fade-in animation to sections when they come into view
        const sections = document.querySelectorAll('.section');
        
        if ('IntersectionObserver' in window) {
            const sectionObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('fade-in-up');
                        sectionObserver.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });
            
            sections.forEach(section => {
                sectionObserver.observe(section);
            });
        }
        
        // Sticky header behavior
        const header = document.querySelector('.header');
        
        window.addEventListener('scroll', function() {
            if (window.scrollY > 100) {
                header.style.background = 'rgba(11, 15, 19, 0.95)';
                header.style.boxShadow = '0 2px 10px rgba(0, 0, 0, 0.1)';
            } else {
                header.style.background = 'rgba(11, 15, 19, 0.9)';
                header.style.boxShadow = 'none';
            }
        });
        
        // Add hover effects to interactive elements
        const interactiveElements = document.querySelectorAll('.btn, .project-card, .certificate-item, .social-icons a, .contact-item');
        
        interactiveElements.forEach(element => {
            element.addEventListener('mouseenter', function() {
                this.style.transition = 'var(--transition)';
            });
            
            element.addEventListener('mouseleave', function() {
                this.style.transition = 'var(--transition)';
            });
        });
        
        // PDF Generation Functionality
        const downloadCVBtn = document.querySelector('a[download]');
        
        if (downloadCVBtn) {
            downloadCVBtn.addEventListener('click', function(e) {
                e.preventDefault();
                generateCVPDF();
            });
        }
        
        function generateCVPDF() {
            // Show loading state
            const originalText = downloadCVBtn.innerHTML;
            downloadCVBtn.innerHTML = '<span class="loading-spinner"></span> Generating CV...';
            downloadCVBtn.disabled = true;
            
            // Use the jsPDF library
            const { jsPDF } = window.jspdf;
            const doc = new jsPDF();
            
            // Set PDF metadata
            doc.setProperties({
                title: 'Mohamed Karam - CV',
                subject: 'Professional CV for Mohamed Karam (MK Dev)',
                author: 'Mohamed Karam',
                keywords: 'cv, resume, frontend developer, web developer'
            });
            
            // Add content to PDF
            addPersonalDetails(doc);
            addSkillsSection(doc);
            addProjectsSection(doc);
            addContactInfo(doc);
            
            // Save the PDF
            setTimeout(() => {
                doc.save('Mohamed_Karam_CV.pdf');
                
                // Restore button state
                downloadCVBtn.innerHTML = originalText;
                downloadCVBtn.disabled = false;
            }, 1000);
        }
        
        function addPersonalDetails(doc) {
            // Add name and title
            doc.setFontSize(24);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(31, 182, 180);
            doc.text('Mohamed Karam (MK Dev)', 105, 20, { align: 'center' });
            
            doc.setFontSize(16);
            doc.setFont(undefined, 'normal');
            doc.setTextColor(100, 100, 100);
            doc.text('Front-End Developer & IT Student', 105, 30, { align: 'center' });
            
            // Add bio
            doc.setFontSize(12);
            doc.setTextColor(80, 80, 80);
            const bioText = "Hi, I'm Mohamed Karam (MK Dev) — a Front-End Developer and IT student with a passion for building clean, responsive, and user-friendly websites. I specialize in HTML, CSS, and JavaScript, focusing on modern design, smooth interactions, and optimized performance.";
            doc.text(bioText, 20, 45, { maxWidth: 170 });
            
            // Add experience
            doc.setFontSize(12);
            doc.setFont(undefined, 'bold');
            doc.text('Experience: more than 2 years', 20, 70);
        }
        
        function addSkillsSection(doc) {
            // Technical Skills
            doc.setFontSize(16);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(31, 182, 180);
            doc.text('Technical Skills', 20, 90);
            
            doc.setFontSize(12);
            doc.setFont(undefined, 'normal');
            doc.setTextColor(80, 80, 80);
            
            const techSkills = [
                { name: 'HTML', percent: 95 },
                { name: 'CSS', percent: 90 },
                { name: 'JavaScript', percent: 80 },
                { name: 'Responsive Design', percent: 88 },
                { name: 'Git & GitHub', percent: 75 }
            ];
            
            techSkills.forEach((skill, index) => {
                const yPos = 100 + (index * 6);
                doc.text(`${skill.name}:`, 20, yPos);
                doc.text(`${skill.percent}%`, 180, yPos, { align: 'right' });
                
                // Draw skill bar
                doc.setDrawColor(200, 200, 200);
                doc.rect(50, yPos - 3, 120, 3);
                
                doc.setFillColor(31, 182, 180);
                doc.rect(50, yPos - 3, 120 * (skill.percent / 100), 3, 'F');
            });
            
            // Soft Skills
            doc.setFontSize(16);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(31, 182, 180);
            doc.text('Soft Skills', 20, 140);
            
            doc.setFontSize(12);
            doc.setFont(undefined, 'normal');
            doc.setTextColor(80, 80, 80);
            
            const softSkills = [
                { name: 'Negotiation', percent: 85 },
                { name: 'Problem Solving', percent: 90 },
                { name: 'Communication', percent: 88 },
                { name: 'Emotional Stability', percent: 80 },
                { name: 'Self Motivation', percent: 92 }
            ];
            
            softSkills.forEach((skill, index) => {
                const yPos = 150 + (index * 6);
                doc.text(`${skill.name}:`, 20, yPos);
                doc.text(`${skill.percent}%`, 180, yPos, { align: 'right' });
                
                // Draw skill bar
                doc.setDrawColor(200, 200, 200);
                doc.rect(60, yPos - 3, 110, 3);
                
                doc.setFillColor(31, 182, 180);
                doc.rect(60, yPos - 3, 110 * (skill.percent / 100), 3, 'F');
            });
        }
        
        function addProjectsSection(doc) {
            // Add new page for projects
            doc.addPage();
            
            doc.setFontSize(16);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(31, 182, 180);
            doc.text('Projects', 105, 20, { align: 'center' });
            
            // Main Projects
            doc.setFontSize(14);
            doc.text('Main Projects', 20, 35);
            
            const mainProjects = [
                {
                    title: 'Dental Clinic Website',
                    description: 'A modern single-page site designed for a dental clinic. Highlights services, contact info, and professional branding.',
                    tech: ['HTML', 'CSS', 'JavaScript'],
                    link: 'https://mohamed249k.github.io/Dental-clinic-website/'
                },
                {
                    title: 'Personal Portfolio Website',
                    description: 'A professional personal site to present skills and projects. Includes About, Projects, and Contact sections with clean design.',
                    tech: ['HTML', 'CSS', 'JavaScript'],
                    link: 'https://mohamed249k.github.io/MyWebsite2/'
                },
                {
                    title: 'Product Management System',
                    description: 'A system to manage products with Create, Read, Update, Delete features. Includes forms and tables for handling inventory data.',
                    tech: ['HTML', 'CSS', 'JavaScript'],
                    link: 'https://mohamed249k.github.io/Product-Management-CRUD/'
                },
                {
                    title: 'Dashboard',
                    description: 'A dynamic and interactive dashboard that visualizes data in real-time. It features charts, tables, and metrics for easy insights.',
                    tech: ['HTML', 'CSS', 'JavaScript', 'Chart.js'],
                    link: 'https://mohamed249k.github.io/Dash-board/'
                }
            ];
            
            let yPosition = 45;
            
            mainProjects.forEach((project, index) => {
                if (yPosition > 240) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(12);
                doc.setFont(undefined, 'bold');
                doc.setTextColor(50, 50, 50);
                doc.text(`${index + 1}. ${project.title}`, 20, yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                const descriptionLines = doc.splitTextToSize(project.description, 170);
                doc.text(descriptionLines, 20, yPosition + 6);
                
                doc.setTextColor(31, 182, 180);
                doc.text(`Tech: ${project.tech.join(', ')}`, 20, yPosition + 6 + (descriptionLines.length * 5));
                doc.text(`Live Demo: ${project.link}`, 20, yPosition + 12 + (descriptionLines.length * 5));
                
                yPosition += 25 + (descriptionLines.length * 5);
            });
            
            // Minor Projects
            doc.addPage();
            doc.setFontSize(14);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(31, 182, 180);
            doc.text('Minor Projects', 20, 20);
            
            const minorProjects = [
                {
                    title: 'Photo Edit',
                    description: 'A simple web-based photo editing tool for quick adjustments. Users can crop, filter, and enhance images easily.',
                    tech: ['HTML', 'CSS', 'JavaScript', 'Canvas API'],
                    link: 'https://mohamed249k.github.io/Photo-Edit/'
                },
                {
                    title: 'Interactive Quiz App',
                    description: 'A fun quiz platform with multiple-choice questions. Tracks user progress and shows results at the end.',
                    tech: ['HTML', 'CSS', 'JavaScript'],
                    link: 'https://mohamed249k.github.io/Interactive-Quiz-/'
                },
                {
                    title: 'Recipe Finder App',
                    description: 'A web app that fetches recipes from an external API. Users can search by keywords and explore cooking details.',
                    tech: ['HTML', 'CSS', 'JavaScript', 'API'],
                    link: 'https://mohamed249k.github.io/Recipe-Finder/'
                },
                {
                    title: 'Portfolio Builder Tool',
                    description: 'An online tool that helps users create professional portfolios easily. Includes sections for projects, skills, and personal branding.',
                    tech: ['HTML', 'CSS', 'JavaScript'],
                    link: 'https://mohamed249k.github.io/Portfolio-Tool-with-Live-Preview/'
                }
            ];
            
            yPosition = 30;
            
            minorProjects.forEach((project, index) => {
                if (yPosition > 240) {
                    doc.addPage();
                    yPosition = 20;
                }
                
                doc.setFontSize(12);
                doc.setFont(undefined, 'bold');
                doc.setTextColor(50, 50, 50);
                doc.text(`${index + 1}. ${project.title}`, 20, yPosition);
                
                doc.setFontSize(10);
                doc.setFont(undefined, 'normal');
                const descriptionLines = doc.splitTextToSize(project.description, 170);
                doc.text(descriptionLines, 20, yPosition + 6);
                
                doc.setTextColor(31, 182, 180);
                doc.text(`Tech: ${project.tech.join(', ')}`, 20, yPosition + 6 + (descriptionLines.length * 5));
                doc.text(`Live Demo: ${project.link}`, 20, yPosition + 12 + (descriptionLines.length * 5));
                
                yPosition += 25 + (descriptionLines.length * 5);
            });
        }
        
        function addContactInfo(doc) {
            doc.addPage();
            
            doc.setFontSize(16);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(31, 182, 180);
            doc.text('Contact Information', 105, 20, { align: 'center' });
            
            doc.setFontSize(12);
            doc.setFont(undefined, 'normal');
            doc.setTextColor(80, 80, 80);
            
            const contactDetails = [
                { icon: '📧', label: 'Email', value: 'mohamedelmagraby35@gmail.com' },
                { icon: '📱', label: 'Phone', value: '01201535709' },
                { icon: '💬', label: 'WhatsApp', value: '01017325592' },
                { icon: '📍', label: 'Location', value: 'Alexandria, Egypt' }
            ];
            
            contactDetails.forEach((detail, index) => {
                const yPos = 40 + (index * 15);
                doc.text(`${detail.icon} ${detail.label}:`, 20, yPos);
                doc.text(detail.value, 70, yPos);
            });
            
            // Social Media Links
            doc.setFontSize(14);
            doc.setFont(undefined, 'bold');
            doc.setTextColor(31, 182, 180);
            doc.text('Social Media', 20, 120);
            
            doc.setFontSize(12);
            doc.setFont(undefined, 'normal');
            doc.setTextColor(80, 80, 80);
            
            const socialLinks = [
                { platform: 'Facebook', url: 'https://www.facebook.com/share/17Cic3oquA/' },
                { platform: 'Instagram', url: 'https://www.instagram.com/mhmdkrm650' },
                { platform: 'GitHub', url: 'https://github.com/mohamed249k' },
                { platform: 'LinkedIn', url: 'https://www.linkedin.com/in/mohamed-elmagraby-777925361' },
                { platform: 'X (Twitter)', url: 'https://x.com/mohamed54267911' }
            ];
            
            socialLinks.forEach((social, index) => {
                const yPos = 135 + (index * 8);
                doc.text(`${social.platform}:`, 20, yPos);
                doc.text(social.url, 60, yPos);
            });
            
            // Response time note
            doc.setFontSize(10);
            doc.setTextColor(150, 150, 150);
            doc.text('I respond within 24–48 hours', 105, 180, { align: 'center' });
        }
    }
});